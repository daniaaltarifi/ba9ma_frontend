{"version":3,"file":"static/js/14.a6aa416c.chunk.js","mappings":"sLAiWA,QA1VA,WAAkB,IAADA,EACf,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,KAC5CG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAMC,IAAWN,EAAAA,EAAAA,UAAS,KAC1BO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAeC,IAAoBV,EAAAA,EAAAA,UAAS,OAC5CW,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAS,IAEzCa,GAAWC,EAAAA,EAAAA,MAEXC,EAAyB,QAAjBlB,GADGmB,EAAAA,EAAAA,MACSC,aAAK,IAAApB,OAAA,EAAdA,EAAgBkB,UAmDjCG,EAAAA,EAAAA,YAAU,KACRC,OAAOC,SAAS,EAAG,GAZIC,WACvB,IACE,MAGMC,SAHiBC,EAAAA,EAAMC,IAAI,GAADC,OAC3BC,EAAAA,EAAO,mCAEUJ,KACtBV,EAAeU,EACjB,CAAE,MAAOK,GACPC,QAAQC,IAAI,qCAADJ,OAAsCE,GACnD,GAIAG,GApDgBT,WAChB,IACE,MAEMU,SAFiBR,EAAAA,EAAMC,IAAI,GAADC,OAAIC,EAAAA,EAAO,qBAChBJ,KACKU,QAC7BC,GAAyB,aAAhBA,EAAKC,SAGjB,GADA9B,EAAS2B,GACLA,EAAcI,UAAW,CAC3B,MAAMC,EAAgB,IAAIC,KACxBN,EAAcI,WACdG,mBAAmB,QAAS,CAC5BC,KAAM,UACNC,MAAO,UACPC,IAAK,YAEPV,EAAcI,UAAYC,CAC5B,CACF,CAAE,MAAOT,GAAQ,GAmCjBe,GAjCgBrB,WAChB,IACE,MACMhB,SADiBkB,EAAAA,EAAMC,IAAI,GAADC,OAAIC,EAAAA,EAAO,yBACrBJ,KACtBhB,EAAQD,EACV,CAAE,MAAOsB,GACPC,QAAQD,MAAM,wBAAyBA,EACzC,GA2BAgB,GAxB0BtB,WAC1B,MAEMU,SAFiBR,EAAAA,EAAMC,IAAI,GAADC,OAAIC,EAAAA,EAAO,qBAChBJ,KACKU,QAC7BC,GAAyB,aAAhBA,EAAKC,SAEjB1B,EAAkBuB,EAAc,EAmBhCa,EAAqB,GACpB,IAIH,MAAMC,EAAqBC,IACzBC,EAAqB,GACrB,MAAMC,EAAQF,EAAMG,OAAOC,MAC3BnD,EAAeiD,GACf,MAAMG,EAAkBhD,EAAM6B,QAAQC,GACpCA,EAAKmB,MAAMC,cAAcC,SAASN,EAAMK,iBAG1CnD,EAAiBiD,EAAgB,GAsB5BI,EAAcC,IAAmBxD,EAAAA,EAAAA,UAAS,KAE1CyD,EAAmBV,IAAwB/C,EAAAA,EAAAA,UAAS,GAMrD0D,EAAcC,KAAKC,KAAKL,EAAaM,OAHrB,IAMtB3C,EAAAA,EAAAA,YAAU,KAER,IAAI4C,EAAgB,GAGlBA,EADEhE,EAAY+D,OAAS,EACP1D,EAAM6B,QAAQC,GAC5BA,EAAKmB,MAAMC,cAAcC,SAASxD,EAAYuD,iBAErB,OAAlB5C,EACON,EAAM6B,QAAQC,GAASA,EAAK8B,KAAOtD,IAC1CM,EACOZ,EAAM6B,QAAQC,GAASA,EAAKlB,WAAaA,IAEzCZ,EAGlBqD,EAAgBM,GAChBf,EAAqB,EAAE,GACtB,CAAC5C,EAAOL,EAAaW,EAAeM,IAGvC,MAcMiD,EAzCgB,EAyCHP,EACbQ,EAAWD,EA1CK,EA2ChBE,EAAeX,EAAaY,MAAMH,EAAYC,GAEpD,OACEG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAEG3D,EAAY4D,KAAKC,IAChBJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,cAAaH,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,oBAAmBH,SAAEE,EAAIpB,SACtCsB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iBAAgBH,UAC7BI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,wBAAuBH,SAAEE,EAAIG,YAHZH,EAAIT,OAQxCW,EAAAA,EAAAA,KAAA,WAASD,UAAU,iBAAgBH,UACjCI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,aAAYH,UACzBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,OAAMH,SAAA,EACnBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,wCAAuCH,SAAA,EAEpDF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,MAAKH,SAAA,EAClBI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,+BAA8BH,UAC3CI,EAAAA,EAAAA,KAAA,MAAID,UAAU,aAAYH,SAAC,iFAE7BI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,+BAA8BH,UAC3CF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,iBAAgBH,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEI,EAAAA,EAAAA,KAAA,KACED,UAAU,qCACVG,MAAO,CAAEC,MAAO,aACZ,QAERH,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,YAAY,uEACZ7B,MAAOpD,EACP2E,UAAU,cACVO,SAAUnC,KAEZuB,EAAAA,EAAAA,MAAA,KACEK,UAAU,uCACVO,SAAUnC,EAAkByB,SAAA,CAC7B,qBACK,OAELxE,IACC4E,EAAAA,EAAAA,KAAA,MAAID,UAAU,kBAAiBH,SAC5BrE,EAAc4D,OAAS,EACtB5D,EAAcsE,KAAKtC,IACjBmC,EAAAA,EAAAA,MAAA,MAEEa,QAASA,KACPpE,EAAS,gBAADY,OAAiBQ,EAAK8B,KAC9B5C,OAAOC,SAAS,EAAG,EAAE,EACrBkD,SAAA,EAEFI,EAAAA,EAAAA,KAAA,OACEQ,IAAG,wCAAAzD,OAA0CQ,EAAKkD,KAClDC,IAAKnD,EAAKmB,MACViC,QAAQ,SAETpD,EAAKmB,QAXDnB,EAAK8B,OAedW,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,8BAQfJ,EAAaK,KAAI,CAACtC,EAAMqD,KAAK,IAAAC,EAAA,OAC5Bb,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHC,GAAE,gBAAAhE,OAAkBQ,EAAK8B,IACzBa,MAAO,CAAEc,eAAgB,QAASpB,UAElCI,EAAAA,EAAAA,KAAA,OAAiBD,UAAU,2BAA0BH,SAClDrC,GACCmC,EAAAA,EAAAA,MAAA,OAAKK,UAAU,UAASH,SAAA,EACtBI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,4CAA2CH,UACxDI,EAAAA,EAAAA,KAAA,OACEQ,IAAG,wCAAAzD,OAA0CQ,EAAKkD,KAClDV,UAAU,qBACVW,IAAI,OACJC,QAAQ,YAGZjB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,8BAA6BH,SAAA,EAC1CI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,2BAA0BH,UACvCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,iBAAgBH,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,wBAAuBH,SACjCrC,EAAKmB,SAERsB,EAAAA,EAAAA,KAAA,SAAOD,UAAU,WAAUH,SAChB,QADgBiB,EACxBtD,EAAK0D,WAAG,IAAAJ,OAAA,EAARA,EAAUxE,eAGfqD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAID,UAAU,qBAAoBH,SAC/BrC,EAAK2D,UAERxB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,SAAQH,SAAA,EACrBI,EAAAA,EAAAA,KAAA,KACED,UAAU,mCACVG,MAAO,CAAEC,MAAO,cAElBT,EAAAA,EAAAA,MAAA,KAAGK,UAAU,sBAAqBH,SAAA,CAC/B,IAAIjC,KACHJ,EAAKE,WACLG,mBAAmB,QAAS,CAC5BC,KAAM,UACNC,MAAO,UACPC,IAAK,YACH,mBAMdiC,EAAAA,EAAAA,KAAA,KAAGD,UAAU,uBAAsBH,SAAErC,EAAK0C,eAI9CD,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yBAhDTa,IAmDL,KAETZ,EAAAA,EAAAA,KAAA,OAAKD,UAAU,mBAAkBH,UAC/BF,EAAAA,EAAAA,MAAA,OACEK,UAAU,uCACVG,MAAO,CAAEiB,UAAW,QAASvB,SAAA,EAE7BI,EAAAA,EAAAA,KAAA,UAAQO,QAvJFa,KACpB/C,GAAsBgD,GACpBA,IAAcrC,EAAc,EAAI,EAAIqC,EAAY,GACjD,EAoJ6CtB,UAAU,WAAUH,UAClDI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,yBAEfL,EAAAA,EAAAA,MAAA,OACEQ,MAAO,CACLoB,UAAW,SACXH,UAAW,MACXI,SAAU,QACV3B,SAAA,EAEFI,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEsB,WAAY,QAAS5B,SACjCb,EAAoB,IACf,IAAI,KACTC,MAELgB,EAAAA,EAAAA,KAAA,UAAQO,QA/JFkB,KACpBpD,GAAsBgD,GACN,IAAdA,EAAkBrC,EAAc,EAAIqC,EAAY,GACjD,EA4J6CtB,UAAU,WAAUH,UAClDI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,gCAKrBL,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gCAA+BH,SAAA,EAC5CI,EAAAA,EAAAA,KAAA,KAAGD,UAAU,mBAAkBH,SAAC,gGAC/B/D,EAAegE,KAAK6B,IACnB1B,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CACHC,GAAE,gBAAAhE,OAAkB2E,EAAerC,IACnCa,MAAO,CAAEc,eAAgB,OAAQb,MAAO,QAASP,UAEjDF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,sBAAqBH,SAAA,EAClCI,EAAAA,EAAAA,KAAA,OACEQ,IAAG,wCAAAzD,OAA0C2E,EAAejB,KAC5DC,IAAI,GACJX,UAAU,0BACVY,QAAQ,UAEVX,EAAAA,EAAAA,KAAA,KAAGD,UAAU,iBAAgBH,SAAE8B,EAAehD,gBAIpDsB,EAAAA,EAAAA,KAAA,KAAGD,UAAU,mBAAkBH,SAAC,iDAChCI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,gBAAeH,SAC3BjE,EAAKkE,KAAK8B,IACT3B,EAAAA,EAAAA,KAAA,OAAAJ,UACEI,EAAAA,EAAAA,KAAA,UACEI,KAAK,SACLL,UAAU,iCACVQ,QAASA,IAzPN5D,WACrB,IACE,MAIMiF,SAJiB/E,EAAAA,EAAMC,IAAI,GAADC,OAC3BC,EAAAA,EAAO,wBAAAD,OAAuBV,KAEZO,KACGiD,KAAK8B,IAAG,CAChCtC,GAAIsC,EAAIE,QACRnD,MAAOiD,EAAIjD,MACXwC,OAAQS,EAAIT,OACZjB,MAAO0B,EAAI1B,MACXQ,IAAKkB,EAAIlB,IACTQ,IAAKU,EAAIV,QAEXvF,EAASkG,EAEX,CAAE,MAAO3E,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,GAuOiC6E,CAAeH,EAAItF,UAAUuD,SAE3C+B,EAAItF,YANCsF,EAAItC,oBAiBhC,C","sources":["Pages/Blogs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../Css/blogs.css\";\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { API_URL } from \"../App\";\r\n\r\nfunction Blogs() {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n  const [lastThreeBlogs, setLastThreeBlogs] = useState([]);\r\n  const [selectedTagId, setSelectedTagId] = useState(null);\r\n  const [dynamicBlog, setDynamicBlog] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const tag_name = location.state?.tag_name;\r\n  const fetchBlog = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/blog/All-blogs`);\r\n      const blogsData = response.data;\r\n      const approvedBlogs = blogsData.filter(\r\n        (blog) => blog.action === \"approved\"\r\n      );\r\n      setBlogs(approvedBlogs);\r\n      if (approvedBlogs.createdAt) {\r\n        const formattedDate = new Date(\r\n          approvedBlogs.createdAt\r\n        ).toLocaleDateString(\"en-GB\", {\r\n          year: \"numeric\",\r\n          month: \"numeric\",\r\n          day: \"numeric\",\r\n        });\r\n        approvedBlogs.createdAt = formattedDate; // Overwrite the createdAt field with formatted date\r\n      }\r\n    } catch (error) {}\r\n  };\r\n  const fetchTags = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/Tags/getUniqueTags`);\r\n      const tags = response.data;\r\n      setTags(tags); // Assuming setTags is a function to update your state\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch tags:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchLastThreeBlogs = async () => {\r\n    const response = await axios.get(`${API_URL}/blog/lastthree`);\r\n    const blogsData = response.data;\r\n    const approvedBlogs = blogsData.filter(\r\n      (blog) => blog.action === \"approved\"\r\n    );\r\n    setLastThreeBlogs(approvedBlogs);\r\n  };\r\n  // design of blog that have purple background\r\n  const fetchDynamicBlog = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_URL}/dynamicBlogs/getDynamicBlogs`\r\n      );\r\n      const data = response.data;\r\n      setDynamicBlog(data);\r\n    } catch (error) {\r\n      console.log(`Error getting data from frontend: ${error}`);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    fetchDynamicBlog();\r\n    fetchBlog();\r\n    fetchTags();\r\n    fetchLastThreeBlogs();\r\n  }, []);\r\n\r\n  // Calculate which blogs to display based on current slide index\r\n\r\n  const handleInputChange = (event) => {\r\n    setCurrentSlideIndex(0); // Reset to the first slide when filtering changes\r\n    const query = event.target.value;\r\n    setSearchQuery(query);\r\n    const filteredResults = blogs.filter((blog) =>\r\n      blog.title.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n\r\n    setSearchResults(filteredResults);\r\n  };\r\n  const handleTagClick = async (tag_name) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_URL}/Tags/getBlogsByTag/${tag_name}`\r\n      );\r\n      const blogs = response.data;\r\n      const mappedBlogs = blogs.map((tag) => ({\r\n        id: tag.blog_id, // Adjust as needed\r\n        title: tag.title,\r\n        author: tag.author,\r\n        descr: tag.descr,\r\n        img: tag.img,\r\n        Tag: tag.Tag,\r\n      }));\r\n      setBlogs(mappedBlogs);\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch blogs:\", error);\r\n    }\r\n  };\r\n  const [displayBlogs, setDisplayBlogs] = useState([]);\r\n\r\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);\r\n\r\n  // Number of blogs per slide\r\n  const blogsPerSlide = 5;\r\n\r\n  // Calculate total number of slides\r\n  const totalSlides = Math.ceil(displayBlogs.length / blogsPerSlide);\r\n\r\n  // Update the displayBlogs state based on filters\r\n  useEffect(() => {\r\n    // window.scrollTo(0,0)\r\n    let filteredBlogs = [];\r\n\r\n    if (searchQuery.length > 0) {\r\n      filteredBlogs = blogs.filter((blog) =>\r\n        blog.title.toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    } else if (selectedTagId !== null) {\r\n      filteredBlogs = blogs.filter((blog) => blog.id === selectedTagId);\r\n    } else if (tag_name) {\r\n      filteredBlogs = blogs.filter((blog) => blog.tag_name === tag_name);\r\n    } else {\r\n      filteredBlogs = blogs;\r\n    }\r\n\r\n    setDisplayBlogs(filteredBlogs);\r\n    setCurrentSlideIndex(0); // Reset to the first slide when filtering changes\r\n  }, [blogs, searchQuery, selectedTagId, tag_name]);\r\n\r\n  // Function to navigate to the next slide\r\n  const goToNextSlide = () => {\r\n    setCurrentSlideIndex((prevIndex) =>\r\n      prevIndex === totalSlides - 1 ? 0 : prevIndex + 1\r\n    );\r\n  };\r\n\r\n  // Function to navigate to the previous slide\r\n  const goToPrevSlide = () => {\r\n    setCurrentSlideIndex((prevIndex) =>\r\n      prevIndex === 0 ? totalSlides - 1 : prevIndex - 1\r\n    );\r\n  };\r\n\r\n  // Calculate which blogs to display based on current slide index\r\n  const startIndex = currentSlideIndex * blogsPerSlide;\r\n  const endIndex = startIndex + blogsPerSlide;\r\n  const visibleBlogs = displayBlogs.slice(startIndex, endIndex);\r\n\r\n  return (\r\n    <>\r\n      {/* header */}\r\n      {dynamicBlog.map((dyn) => (\r\n        <div className=\"header_blog\" key={dyn.id}>\r\n          <p className=\"title_header_blog\">{dyn.title}</p>\r\n          <div className=\"paragraph_cont\">\r\n            <p className=\"paragraph_header_blog\">{dyn.descr}</p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      {/* End header */}\r\n      <section className=\"margin_section\">\r\n        <div className=\"container \">\r\n          <div className=\"row \">\r\n            <div className=\"col-lg-8 col-md-12 col-sm-12 col_blog\">\r\n              {/* search */}\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-7 col-md-12 col-sm-12\">\r\n                  <h1 className=\"title_blog\">جميع المقالات</h1>\r\n                </div>\r\n                <div className=\"col-lg-5 col-md-12 col-sm-12\">\r\n                  <div className=\"navbar__search\">\r\n                    <span>\r\n                      <i\r\n                        className=\"fa-solid fa-magnifying-glass fa-sm\"\r\n                        style={{ color: \"#833988\" }}\r\n                      ></i>{\" \"}\r\n                    </span>\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"ابحث عن موضوع\"\r\n                      value={searchQuery}\r\n                      className=\"search_blog\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                    <a\r\n                      className=\"btn btn-s purple_btn search_btn_blog\"\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      بحث{\" \"}\r\n                    </a>\r\n                    {searchQuery && (\r\n                      <ul className=\"search_dropdown\">\r\n                        {searchResults.length > 0 ? (\r\n                          searchResults.map((blog) => (\r\n                            <li\r\n                              key={blog.id}\r\n                              onClick={() => {\r\n                                navigate(`/blogdetails/${blog.id}`);\r\n                                window.scrollTo(0, 0);\r\n                              }}\r\n                            >\r\n                              <img\r\n                                src={`https://res.cloudinary.com/durjqlivi/${blog.img}`}\r\n                                alt={blog.title}\r\n                                loading=\"lazy\"\r\n                              />\r\n                              {blog.title}\r\n                            </li>\r\n                          ))\r\n                        ) : (\r\n                          <li>No blogs found.</li>\r\n                        )}\r\n                      </ul>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* End search */}\r\n              {visibleBlogs.map((blog, index) => (\r\n                <Link\r\n                  to={`/blogdetails/${blog.id}`}\r\n                  style={{ textDecoration: \"none\" }}\r\n                >\r\n                  <div key={index} className=\"card mb-3 card_cont_blog\">\r\n                    {blog ? (\r\n                      <div className=\"row g-0\">\r\n                        <div className=\"col-lg-4 col-md-4 col-sm-12 img_col_blogs\">\r\n                          <img\r\n                            src={`https://res.cloudinary.com/durjqlivi/${blog.img}`}\r\n                            className=\"img-fluid img_blog\"\r\n                            alt=\"blog\"\r\n                            loading=\"lazy\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-lg-8 col-md-8 col-sm-12\">\r\n                          <div className=\"card-body card_body_blog\">\r\n                            <div className=\"cont_info_blog\">\r\n                              <div>\r\n                                <p className=\"card-title blog_title\">\r\n                                  {blog.title}\r\n                                </p>\r\n                                <small className=\"blog_dep\">\r\n                                  {blog.Tag?.tag_name}\r\n                                </small>\r\n                              </div>\r\n                              <div>\r\n                                <h5 className=\" teacher_name_blog\">\r\n                                  {blog.author}\r\n                                </h5>\r\n                                <div className=\"d-flex\">\r\n                                  <i\r\n                                    className=\"fa-solid fa-clock card_icon ms-2\"\r\n                                    style={{ color: \"#F57D20\" }}\r\n                                  ></i>\r\n                                  <p className=\"details_blogs_card \">\r\n                                    {new Date(\r\n                                      blog.createdAt\r\n                                    ).toLocaleDateString(\"en-GB\", {\r\n                                      year: \"numeric\",\r\n                                      month: \"numeric\",\r\n                                      day: \"numeric\",\r\n                                    })}{\" \"}\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <p className=\"card-text desc_blog \">{blog.descr}</p>\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"col-md-12 col-sm-12\"></div>\r\n                    )}\r\n                  </div>\r\n                </Link>\r\n              ))}\r\n              <div className=\"text-center mt-3\">\r\n                <div\r\n                  className=\"col-md-12 col-sm-12 col_btn_prevNext\"\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <button onClick={goToNextSlide} className=\"btn mb-3\">\r\n                    <i className=\"fa fa-arrow-right\"></i>\r\n                  </button>\r\n                  <div\r\n                    style={{\r\n                      textAlign: \"center\",\r\n                      marginTop: \"5px\",\r\n                      fontSize: \"18px\",\r\n                    }}\r\n                  >\r\n                    <span style={{ fontWeight: \"bold\" }}>\r\n                      {currentSlideIndex + 1}\r\n                    </span>{\" \"}\r\n                    / {totalSlides}\r\n                  </div>\r\n                  <button onClick={goToPrevSlide} className=\"btn mb-3\">\r\n                    <i className=\"fa fa-arrow-left\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-3 col-md-12 col-sm-12 \">\r\n              <p className=\"categories_title\">المقالات الأخيرة</p>\r\n              {lastThreeBlogs.map((lastthreeblogs) => (\r\n                <Link\r\n                  to={`/blogdetails/${lastthreeblogs.id}`}\r\n                  style={{ textDecoration: \"none\", color: \"#000\" }}\r\n                >\r\n                  <div className=\"categ_lastblog_cont\">\r\n                    <img\r\n                      src={`https://res.cloudinary.com/durjqlivi/${lastthreeblogs.img}`}\r\n                      alt=\"\"\r\n                      className=\"img-fluid img_last_blog\"\r\n                      loading=\"lazy\"\r\n                    />\r\n                    <p className=\"desc_last_blog\">{lastthreeblogs.title}</p>\r\n                  </div>\r\n                </Link>\r\n              ))}\r\n              <p className=\"categories_title\">التاغات </p>\r\n              <div className=\"tags_btn_cont\">\r\n                {tags.map((tag) => (\r\n                  <div key={tag.id}>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-secondary mb-1\"\r\n                      onClick={() => handleTagClick(tag.tag_name)}\r\n                    >\r\n                      {tag.tag_name}\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n"],"names":["_location$state","searchQuery","setSearchQuery","useState","searchResults","setSearchResults","blogs","setBlogs","tags","setTags","lastThreeBlogs","setLastThreeBlogs","selectedTagId","setSelectedTagId","dynamicBlog","setDynamicBlog","navigate","useNavigate","tag_name","useLocation","state","useEffect","window","scrollTo","async","data","axios","get","concat","API_URL","error","console","log","fetchDynamicBlog","approvedBlogs","filter","blog","action","createdAt","formattedDate","Date","toLocaleDateString","year","month","day","fetchBlog","fetchTags","fetchLastThreeBlogs","handleInputChange","event","setCurrentSlideIndex","query","target","value","filteredResults","title","toLowerCase","includes","displayBlogs","setDisplayBlogs","currentSlideIndex","totalSlides","Math","ceil","length","filteredBlogs","id","startIndex","endIndex","visibleBlogs","slice","_jsxs","_Fragment","children","map","dyn","className","_jsx","descr","style","color","type","placeholder","onChange","onClick","src","img","alt","loading","index","_blog$Tag","Link","to","textDecoration","Tag","author","marginTop","goToNextSlide","prevIndex","textAlign","fontSize","fontWeight","goToPrevSlide","lastthreeblogs","tag","mappedBlogs","blog_id","handleTagClick"],"sourceRoot":""}